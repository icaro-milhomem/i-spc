generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        Int      @id @default(autoincrement())
  nome      String
  cnpj      String?  @unique
  razao_social String?
  cep       String?
  endereco  String?
  numero    String?
  bairro    String?
  cidade    String?
  uf        String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  usuarios  Usuario[]
  dividas   Divida[]
  clientes  Cliente[]
  enderecos_empresa_cliente EnderecoClienteEmpresa[]

  @@map("tenants")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  perfil    String   @default("usuario")
  role      String?
  tenant_id Int?
  tenant    Tenant?  @relation(fields: [tenant_id], references: [id])
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  backups   Backup[]
  logs      Log[]
  papeis    Papel[]  @relation("UsuarioPapel")
  dividas   Divida[]
  criado_por_id Int?
  criado_por   Usuario? @relation("UsuarioCriador", fields: [criado_por_id], references: [id])
  criados      Usuario[] @relation("UsuarioCriador")
  clientes_criados Cliente[] @relation("UsuarioCriadorCliente")

  @@map("usuarios")
}

model Papel {
  id         Int         @id @default(autoincrement())
  nome       String      @unique
  descricao  String?
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  permissoes Permissao[] @relation("PapelPermissao")
  usuarios   Usuario[]   @relation("UsuarioPapel")

  @@map("papeis")
}

model Permissao {
  id        Int      @id @default(autoincrement())
  codigo    String   @unique
  descricao String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  papeis    Papel[]  @relation("PapelPermissao")

  @@map("permissoes")
}

model Cliente {
  id           Int           @id @default(autoincrement())
  nome         String
  cpf          String        @unique
  email        String?
  telefone     String?
  endereco     String?
  status       String        @default("ativo")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  dividas      Divida[]
  notificacoes Notificacao[]
  consultas    Consulta[]
  criado_por_id Int?
  criado_por   Usuario? @relation("UsuarioCriadorCliente", fields: [criado_por_id], references: [id])
  tenant_id    Int?
  tenant       Tenant?  @relation(fields: [tenant_id], references: [id])
  enderecos_empresa_cliente EnderecoClienteEmpresa[]

  @@map("clientes")
}

model Divida {
  id                    Int      @id @default(autoincrement())
  tenant_id             Int
  usuario_id            Int
  cliente_id            Int
  nome_devedor          String
  cpf_cnpj_devedor      String
  valor                 Decimal
  descricao             String?
  data_cadastro         DateTime @default(now())
  protocolo             String?   @unique
  empresa               String?
  cnpj_empresa          String?
  status_negativado     Boolean  @default(false)

  tenant   Tenant   @relation(fields: [tenant_id], references: [id])
  usuario  Usuario  @relation(fields: [usuario_id], references: [id])
  cliente  Cliente  @relation(fields: [cliente_id], references: [id])
  notificacoes Notificacao[]
}

model Notificacao {
  id         Int      @id @default(autoincrement())
  cliente_id Int
  tipo       String
  mensagem   String
  status     String   @default("pendente")
  data       DateTime @default(now())
  divida_id  Int?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  cliente    Cliente  @relation(fields: [cliente_id], references: [id])
  divida     Divida?  @relation(fields: [divida_id], references: [id])

  @@map("notificacoes")
}

model Configuracao {
  chave     String   @id
  valor     String
  descricao String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("configuracoes")
}

model Backup {
  id         Int      @id @default(autoincrement())
  data       DateTime @default(now())
  status     String   @default("pendente")
  usuario_id Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  usuario    Usuario  @relation(fields: [usuario_id], references: [id])

  @@map("backups")
}

model Log {
  id         Int      @id @default(autoincrement())
  acao       String
  detalhes   String?
  usuario_id Int
  createdAt  DateTime @default(now()) @map("created_at")
  usuario    Usuario  @relation(fields: [usuario_id], references: [id])

  @@map("logs")
}

model Consulta {
  id          Int      @id @default(autoincrement())
  cliente_id  Int
  data        DateTime
  tipo        String
  observacoes String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  cliente     Cliente  @relation(fields: [cliente_id], references: [id])

  @@map("consultas")
}

model EnderecoClienteEmpresa {
  id         Int      @id @default(autoincrement())
  cliente_id Int
  tenant_id  Int
  endereco   String
  createdAt  DateTime @default(now())
  cliente    Cliente  @relation(fields: [cliente_id], references: [id])
  tenant     Tenant   @relation(fields: [tenant_id], references: [id])

  @@map("enderecos_cliente_empresa")
}
